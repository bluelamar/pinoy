#!/bin/bash
#
# This is the init.d script for the couchdb service
#
### BEGIN INIT INFO
# Provides:          couchdb
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Should-Start:      $network $time
# Should-Stop:       $network $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop the couchdb database server daemon
# Description:       Controls the main couchdb database server daemon "couchdb"
### END INIT INFO
#
set -e
set -u
${DEBIAN_SCRIPT_DEBUG:+ set -v -x}

. /lib/lsb/init-functions

CNAME=pinoy-cdb-1

SELF=$(cd $(dirname $0); pwd -P)/$(basename $0)
#MYADMIN="/usr/bin/mysqladmin --defaults-file=/etc/mysql/debian.cnf"

# priority can be overriden and "-s" adds output to stderr
ERR_LOGGER="logger -p daemon.err -t couchdb"

# Safeguard (relative paths, core dumps..)
cd /
umask 077

export HOME=/var/opt/couchdb/

sanity_checks() {
  # check for config file
  #if [ ! -r /etc/mysql/my.cnf ]; then
  #  log_warning_msg "$0: WARNING: /etc/mysql/my.cnf cannot be read. See README.Debian.gz"
  #  echo                "WARNING: /etc/mysql/my.cnf cannot be read. See README.Debian.gz" | $ERR_LOGGER
  #fi

  # check for diskspace shortage
  datadir=/var/opt/couchdb/
  if LC_ALL=C BLOCKSIZE= df --portability $datadir/. | tail -n 1 | awk '{ exit ($4>4096) }'; then
    log_failure_msg "$0: ERROR: The partition with $datadir is too full!"
    echo                "ERROR: The partition with $datadir is too full!" | $ERR_LOGGER
    exit 1
  fi
}

## Checks if there is a server running and if so if it is accessible.
#
# check_alive insists on a pingable server
# check_dead also fails if there is a lost pinoy in the docker process list
#
# Usage: boolean server_status [check_alive|check_dead] [warn|nowarn]
server_status () {

    ps_alive=0
    docker ps | grep pinoy
    RET=$?
    if [ $RET -eq 0 ]; then
        # running
        ps_alive=1
    fi

    ping_alive=0
    ping_output=`curl http://localhost:5984/`
    RET=$?
    if [ $RET -eq 0 ]; then
        # responsive
        ping_alive=1
    fi

    if [ "$1" = "check_alive"  -a  $ping_alive = 1 ] ||
       [ "$1" = "check_dead"   -a  $ping_alive = 0  -a  $ps_alive = 0 ]; then
        return 0 # EXIT_SUCCESS
    else
        if [ "$2" = "warn" ]; then
            echo -e "$ps_alive processes alive and 'curl localhost' resulted in\n$ping_output\n" | $ERR_LOGGER -p daemon.debug
           if [ $ps_alive = 0 ]; then
               return 0 # EXIT_SUCCESS
           fi
           return 0 # EXIT_SUCCESS
        fi
        return 1 # EXIT_FAILURE
    fi
}

#
# main()
#

case "${1:-''}" in
  'start')
    sanity_checks;
    # Start daemon
    log_daemon_msg "Starting couchdb database server" "couchdb"
    if server_status check_alive nowarn; then
       log_progress_msg "already running"
       log_end_msg 0
    else
        # Start couchdb 
        docker run -dit --restart unless-stopped -p 5984:5984 -p 5986:5986 -v /var/opt/couchdb:/var/opt/couchdb $CNAME

        for i in $(seq 1 10); do
            sleep 1
            if server_status check_alive nowarn ; then break; fi
            log_progress_msg "."
        done
        if server_status check_alive warn; then
                log_end_msg 0
            # Now start mysqlcheck or whatever the admin wants.
            #output=$(/etc/mysql/debian-start)
        #[ -n "$output" ] && log_action_msg "$output"
        else
            log_end_msg 1
            log_failure_msg "Please take a look at the syslog"
        fi
    fi
    ;;

  'stop')
    log_daemon_msg "Stopping couchdb server" "couchdb"
    if ! server_status check_dead nowarn; then
      set +e
      CONTID=`docker ps | grep pinoy | awk '{print $1}'`
      docker stop -t 30 $CONTID
      r=$?
      #shutdown_out=`$MYADMIN shutdown 2>&1`; r=$?
      set -e
      if [ "$r" -ne 0 ]; then
        log_end_msg 1
        [ "$VERBOSE" != "no" ] && log_failure_msg "Error: failed to shutdown couchdb"
        log_daemon_msg "Killing couchdb server by signal" "couchdb"
        killall -15 dockerd
        server_down=
        for i in 1 2 3 4 5 6 7 8 9 10; do
              sleep 1
              if server_status check_dead nowarn; then server_down=1; break; fi
            done
          if test -z "$server_down"; then killall -9 mysqld; fi
      fi
    fi

    if ! server_status check_dead warn; then
      log_end_msg 1
      log_failure_msg "Please stop couchdb manually"
      exit -1
    else
      log_end_msg 0
        fi
    ;;

  'restart')
    set +e; $SELF stop; set -e
    $SELF start 
    ;;

  'reload'|'force-reload')
    log_daemon_msg "Reloading couchdb server" "couchdb"
    set +e; $SELF stop; set -e
    $SELF start 
    log_end_msg 0
    ;;

  'status')
    if server_status check_alive nowarn; then
      log_action_msg "couchdb running"
    else
      log_action_msg "couchdb is stopped."
      exit 3
    fi
      ;;

  *)
    echo "Usage: $SELF start|stop|restart|reload|force-reload|status"
    exit 1
    ;;
esac

exit 0
